// Function library for Amstrad PCW with CP/M Plus

include "standard.ccz80";

// region Constants and startup function

asm
{
  "__bdos:                   equ #0005",

  "__bdos_p_termcpm:         equ #00  ",
  "__bdos_c_read:            equ #01  ",
  "__bdos_c_write:           equ #02  ",
  "__bdos_a_read:            equ #03  ",
  "__bdos_a_write:           equ #04  ",
  "__bdos_l_write:           equ #05  ",
  "__bdos_c_rawio:           equ #06  ",
  "__bdos_a_statin:          equ #07  ",
  "__bdos_a_statout:         equ #08  ",
  "__bdos_c_writestr:        equ #09  ",
  "__bdos_c_readstr:         equ #0A  ",
  "__bdos_c_stat:            equ #0B  ",
  "__bdos_s_bdosver:         equ #0C  ",
  "__bdos_drv_allreset:      equ #0D  ",
  "__bdos_drv_set:           equ #0E  ",
  "__bdos_f_open:            equ #0F  ",
  "__bdos_f_close:           equ #10  ",
  "__bdos_f_sfirst:          equ #11  ",
  "__bdos_f_snext:           equ #12  ",
  "__bdos_f_delete:          equ #13  ",
  "__bdos_f_read:            equ #14  ",
  "__bdos_f_write:           equ #15  ",
  "__bdos_f_make:            equ #16  ",
  "__bdos_f_rename:          equ #17  ",
  "__bdos_drv_loginvec:      equ #18  ",
  "__bdos_drv_get:           equ #19  ",
  "__bdos_f_dmaoff:          equ #1A  ",
  "__bdos_drv_allocvec:      equ #1B  ",
  "__bdos_drv_setro:         equ #1C  ",
  "__bdos_drv_rovec:         equ #1D  ",
  "__bdos_f_attrib:          equ #1E  ",
  "__bdos_drv_dpb:           equ #1F  ",
  "__bdos_f_usernum:         equ #20  ",
  "__bdos_f_readrand:        equ #21  ",
  "__bdos_f_writerand:       equ #22  ",
  "__bdos_f_size:            equ #23  ",
  "__bdos_f_randrec:         equ #24  ",
  "__bdos_drv_reset:         equ #25  ",
  "__bdos_drv_access:        equ #26  ",
  "__bdos_drv_free:          equ #27  ",
  "__bdos_f_writezf:         equ #28  ",
  "__bdos_f_testwrite:       equ #29  ",
  "__bdos_f_lock:            equ #2A  ",
  "__bdos_f_unlock:          equ #2B  ",
  "__bdos_f_multisec:        equ #2C  ",
  "__bdos_f_errmode:         equ #2D  ",
  "__bdos_drv_space:         equ #2E  ",
  "__bdos_p_chain:           equ #2F  ",
  "__bdos_drv_flush:         equ #30  ",
  "__bdos_s_sysvar:          equ #31  ",
  "__bdos_s_bios:            equ #32  ",
  "__bdos_p_load:            equ #3B  ",
  "__bdos_s_rsx:             equ #3C  ",
  "__bdos_drv_clean:         equ #62  ",
  "__bdos_f_truncate:        equ #63  ",
  "__bdos_drv_setlabel:      equ #64  ",
  "__bdos_drv_getlabel:      equ #65  ",
  "__bdos_f_timedate:        equ #66  ",
  "__bdos_f_writexfcb:       equ #67  ",
  "__bdos_t_set:             equ #68  ",
  "__bdos_t_get:             equ #69  ",
  "__bdos_f_passwd:          equ #6A  ",
  "__bdos_s_serial:          equ #6B  ",
  "__bdos_p_code:            equ #6C  ",
  "__bdos_c_mode:            equ #6D  ",
  "__bdos_c_delimit:         equ #6E  ",
  "__bdos_c_writeblk:        equ #6F  ",
  "__bdos_l_writeblk:        equ #70  ",
  "__bdos_f_parse:           equ #98  ",

  "__xbios_dd_init:          equ #0080",
  "__xbios_dd_setup:         equ #0083",
  "__xbios_dd_read_sector:   equ #0086",
  "__xbios_dd_write_sector:  equ #0089",
  "__xbios_dd_check_sector:  equ #008C",
  "__xbios_dd_format:        equ #008F",
  "__xbios_dd_login:         equ #0092",
  "__xbios_dd_sel_format:    equ #0095",
  "__xbios_dd_drive_status:  equ #0098",
  "__xbios_dd_read_id:       equ #009B",
  "__xbios_dd_l_dpb:         equ #009E",
  "__xbios_dd_l_xdpb:        equ #00A1",
  "__xbios_dd_l_on_motor:    equ #00A4",
  "__xbios_dd_l_t_off_motor: equ #00A7",
  "__xbios_dd_l_off_motor:   equ #00AA",
  "__xbios_dd_l_read:        equ #00AD",
  "__xbios_dd_l_write:       equ #00B0",
  "__xbios_dd_l_seek:        equ #00B3",
  "__xbios_cd_sa_init:       equ #00B6",
  "__xbios_cd_sa_baud:       equ #00B9",
  "__xbios_cd_sa_params:     equ #00BC",
  "__xbios_te_ask:           equ #00BF",
  "__xbios_te_reset:         equ #00C2",
  "__xbios_te_stl_ask:       equ #00C5",
  "__xbios_te_stl_on_off:    equ #00C8",
  "__xbios_te_set_ink:       equ #00CB",
  "__xbios_te_set_border:    equ #00CE",
  "__xbios_te_set_speed:     equ #00D1",
  "__xbios_km_set_expand:    equ #00D4",
  "__xbios_km_set_key:       equ #00D7",
  "__xbios_km_kt_get:        equ #00DA",
  "__xbios_km_kt_put:        equ #00DD",
  "__xbios_km_set_speed:     equ #00E0",
  "__xbios_cd_version:       equ #00E3",
  "__xbios_cd_info:          equ #00E6",
  "__xbios_scr_run_routine:  equ #00E9",
  "__xbios_find_fid:         equ #00EC"
}

function byte startup()
{
  "  ld   e,0                                                          ",
  "  ld   c,__bdos_c_delimit                                           ",
  "  call __bdos                 ; Set character 0 for string delimiter",
  "  ld   hl,(#0001)                                                   ",
  "  ld   de,#0057                                                     ",
  "  add  hl,de                                                        ",
  "  ld   (__startup_xbios+1),hl ; Store USERF address                 ",
  "  ret                                                               ",
  "__startup_xbios:                                                    ",
  "  call #0000                                                        ",
  "__startup_xbios_address: defw #0000                                 ",
  "  ret                                                               "
  }

// endregion

// region Keyboard functions

function byte speedkey(byte, byte) // initial delay, subsequent delay
{
  "  ld   hl,__xbios_km_set_speed                         ",
  "  ld   (__startup_xbios_address),hl                    ",
  "  ld   hl,3                                            ",
  "  add  hl,sp                                           ",
  "  ld   e,(hl) ; E = subsequent delay                   ",
  "  inc  hl                                              ",
  "  inc  hl                                              ",
  "  ld   d,(hl) ; D = initial delay                      ",
  "  ex   de,hl  ; H = initial delay, L = subsequent delay",
  "  jp   __startup_xbios                                 "
} using startup;

function byte keydef(byte, byte, byte) // key number, shift states, ASCII value
{
  "  ld   hl,__xbios_km_set_key       ",
  "  ld   (__startup_xbios_address),hl",
  "  ld   hl,3                        ",
  "  add  hl,sp                       ",
  "  ld   b,(hl) ; B = ASCII value    ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   d,(hl) ; D = shift states   ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   c,(hl) ; C = key number     ",
  "  jp   __startup_xbios             "
} using startup;

function byte key(byte, word) // key, string
{
  "  ld   hl,__xbios_km_set_expand                          ",
  "  ld   (__startup_xbios_address),hl                      ",
  "  ld   hl,2                                              ",
  "  add  hl,sp                                             ",
  "  ld   e,(hl)                                            ",
  "  inc  hl                                                ",
  "  ld   d,(hl) ; DE = string                              ",
  "  inc  hl                                                ",
  "  inc  hl                                                ",
  "  ld   b,(hl) ; B = key                                  ",
  "  ex   de,hl  ; HL = string                              ",
  "  push hl                                                ",
  "  call _strlen                                           ",
  "  ld   c,l    ; C = string length (hight byte is ignored)",
  "  pop  hl                                                ",
  "  jp   __startup_xbios                                   "
} using startup, strlen;

function byte clearinput()
{
  "  ld   e,#FF           ",
  "  ld   c,__bdos_c_rawio",
  "  call __bdos          ",
  "  or   a               ",
  "  jr   nz,_clearinput  ",
  "  ret                  "
}

function inline byte inkey()
{
  "  ld   e,#FF           ",
  "  ld   c,__bdos_c_rawio",
  "  call __bdos          "
}

function register word input(word) // string address
{
  "  push hl          ; Save string address          ",
  "  ld   de,__input_4                               ",
  "  ld   c,__bdos_c_writestr                        ",
  "  call __bdos      ; Show cursor                  ",
  "  pop  de          ; Restore string address       ",
  "  ld   bc,0        ; Initialize characters counter",
  "__input_1:                                        ",
  "  push bc          ; Save characters counter      ",
  "  push de          ; Save characters pointer      ",
  "  ld   e,#FD                                      ",
  "  ld   c,__bdos_c_rawio                           ",
  "  call __bdos      ; Read character from keyboard ",
  "  pop  de          ; Restore characters pointer   ",
  "  pop  bc          ; Restore characters counter   ",
  "  cp   127                                        ",
  "  jr   nz,__input_2                               ",
  "  ld   a,b                                        ",
  "  or   c                                          ",
  "  jr   z,__input_1 ; String length is zero        ",
  "  dec  de                                         ",
  "  dec  bc                                         ",
  "  push bc          ; Save characters counter      ",
  "  push de          ; Save characters pointer      ",
  "  ld   de,__input_5                               ",
  "  ld   c,__bdos_c_writestr                        ",
  "  call __bdos      ; Delete last character        ",
  "  pop  de          ; Restore characters pointer   ",
  "  pop  bc          ; Restore characters counter   ",
  "  jr   __input_1                                  ",
  "__input_2:                                        ",
  "  cp   13                                         ",
  "  jr   z,__input_3 ; Enter key pressed            ",
  "  ld   (de),a      ; Store character in string    ",
  "  inc  de                                         ",
  "  inc  bc                                         ",
  "  push bc          ; Save characters counter      ",
  "  push de          ; Save characters pointer      ",
  "  ld   e,a                                        ",
  "  ld   c,__bdos_c_write                           ",
  "  call __bdos      ; Show character pressed       ",
  "  pop  de          ; Restore characters pointer   ",
  "  pop  bc          ; Restore characters counter   ",
  "  jr   __input_1                                  ",
  "__input_3:                                        ",
  "  xor  a                                          ",
  "  ld   (de),a      ; Store end of string character",
  "  ld   de,__input_6                               ",
  "  ld   c,__bdos_c_writestr                        ",
  "  jp   __bdos      ; Hide cursor                  ",
  "__input_4: defb 27,\"e\",0                        ",
  "__input_5: defb 8,\" \",8,0                       ",
  "__input_6: defb 27,\"f\",0                        "
}

// endregion

// region Screen functions

function inline byte resetscreen()
{
  "  ld   hl,__xbios_te_reset         ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             "
} using startup;

function register byte characterset(byte) // country
{
  "  ld   (__characterset_2+2),a             ",
  "  ld   de,__characterset_1                ",
  "  ld   c,__bdos_c_writeblk                ",
  "  jp   __bdos                             ",
  "__characterset_1: defw __characterset_2, 3",
  "__characterset_2: defb 27,\"2\",0         "
}

function register byte mode(byte) // mode
{
  "  ld   (__mode_2+2),a     ",
  "  ld   de,__mode_1        ",
  "  ld   c,__bdos_c_writeblk",
  "  jp   __bdos             ",
  "__mode_1: defw __mode_2, 3",
  "__mode_2: defb 27,\"3\",0 "
}

function register byte mode80x24(byte) // mode 80 x 24 on/off
{
  "  ld   de,__mode80x24_2       ",
  "  or   a                      ",
  "  jr   nz,__mode80x24_1       ",
  "  ld   de,__mode80x24_3       ",
  "__mode80x24_1:                ",
  "  ld   c,__bdos_c_writestr    ",
  "  jp   __bdos                 ",
  "__mode80x24_2: defb 27,\"x\",0",
  "__mode80x24_3: defb 27,\"y\",0"
}

function byte window(byte, byte, byte, byte) // x, y, columns, rows
{
  "  ld   hl,3                        ",
  "  add  hl,sp                       ",
  "  ld   a,(hl) ; A = rows           ",
  "  add  a,31                        ",
  "  ld   (__window_1+4),a            ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   a,(hl) ; A = columns        ",
  "  add  a,31                        ",
  "  ld   (__window_1+5),a            ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   a,(hl) ; A = y              ",
  "  add  a,31                        ",
  "  ld   (__window_1+2),a            ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   a,(hl) ; A = x              ",
  "  add  a,31                        ",
  "  ld   (__window_1+3),a            ",
  "  ld   de,__window_1               ",
  "  ld   c,__bdos_c_writestr         ",
  "  jp   __bdos                      ",
  "__window_1: defb 27,\"X\",0,0,0,0,0"
}

function byte windowx()
{
  "  ld   hl,__xbios_te_ask           ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             ",
  "  ld   a,c                         ",
  "  inc  a                           ",
  "  ret                              "
} using startup;

function byte windowy()
{
  "  ld   hl,__xbios_te_ask           ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             ",
  "  ld   a,b                         ",
  "  inc  a                           ",
  "  ret                              "
} using startup;

function byte windowwidth()
{
  "  ld   hl,__xbios_te_ask           ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             ",
  "  ld   a,e                         ",
  "  inc  a                           ",
  "  ret                              "
} using startup;

function byte windowheight()
{
  "  ld   hl,__xbios_te_ask           ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             ",
  "  ld   a,d                         ",
  "  inc  a                           ",
  "  ret                              "
} using startup;

function register byte cursor(byte) // cursor on/off
{
  "  ld   de,__cursor_2       ",
  "  or   a                   ",
  "  jr   nz,__cursor_1       ",
  "  ld   de,__cursor_3       ",
  "__cursor_1:                ",
  "  ld   c,__bdos_c_writestr ",
  "  jp   __bdos              ",
  "__cursor_2: defb 27,\"e\",0",
  "__cursor_3: defb 27,\"f\",0"
}

function register byte status(byte) // status line on/off
{
  "  ld   de,__status_2       ",
  "  or   a                   ",
  "  jr   nz,__status_1       ",
  "  ld   de,__status_3       ",
  "__status_1:                ",
  "  ld   c,__bdos_c_writestr ",
  "  jp   __bdos              ",
  "__status_2: defb 27,\"1\",0",
  "__status_3: defb 27,\"0\",0"
}

function register byte border(byte) // colour
{
  "  ld   hl,__xbios_te_set_border    ",
  "  ld   (__startup_xbios_address),hl",
  "  ld   b,a ; B = colour            ",
  "  jp   __startup_xbios             "
} using startup;

function byte ink(byte, byte, byte) // ink, colour, flash
{
  "  ld   hl,__xbios_te_set_ink       ",
  "  ld   (__startup_xbios_address),hl",
  "  ld   hl,3                        ",
  "  add  hl,sp                       ",
  "  ld   c,(hl) ; C = flash          ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   b,(hl) ; B = colour         ",
  "  inc  hl                          ",
  "  inc  hl                          ",
  "  ld   a,(hl) ; A = ink            ",
  "  jp   __startup_xbios             "
} using startup;

function register byte paper(byte) // colour
{
  "  ld   (__paper_2+2),a      ",
  "  ld   de,__paper_1         ",
  "  ld   c,__bdos_c_writeblk  ",
  "  jp   __bdos               ",
  "__paper_1: defw __paper_2, 3",
  "__paper_2: defb 27,\"b\",0  "
}

function register byte pen(byte) // colour
{
  "  ld   (__pen_2+2),a      ",
  "  ld   de,__pen_1         ",
  "  ld   c,__bdos_c_writeblk",
  "  jp   __bdos             ",
  "__pen_1: defw __pen_2, 3  ",
  "__pen_2: defb 27,\"c\",0  "
}

function register byte inverse(byte) // inverse on/off
{
  "  ld   de,__inverse_2       ",
  "  or   a                    ",
  "  jr   nz,__inverse_1       ",
  "  ld   de,__inverse_3       ",
  "__inverse_1:                ",
  "  ld   c,__bdos_c_writestr  ",
  "  jp   __bdos               ",
  "__inverse_2: defb 27,\"p\",0",
  "__inverse_3: defb 27,\"q\",0"
}

function register byte underline(byte) // inverse on/off
{
  "  ld   de,__underline_2       ",
  "  or   a                      ",
  "  jr   nz,__underline_1       ",
  "  ld   de,__underline_3       ",
  "__underline_1:                ",
  "  ld   c,__bdos_c_writestr    ",
  "  jp   __bdos                 ",
  "__underline_2: defb 27,\"r\",0",
  "__underline_3: defb 27,\"u\",0"
}

function byte cls()
{
  "  ld   de,__cls_1                ",
  "  ld   c,__bdos_c_writestr       ",
  "  jp   __bdos                    ",
  "__cls_1: defb 27,\"E\",27,\"H\",0"
}

function byte locate(byte, byte) // x, y
{
  "  ld   hl,3                    ",
  "  add  hl,sp                   ",
  "  ld   a,(hl) ; A = y          ",
  "  add  a,31                    ",
  "  ld   (__locate_1+2),a        ",
  "  inc  hl                      ",
  "  inc  hl                      ",
  "  ld   a,(hl) ; A = x          ",
  "  add  a,31                    ",
  "  ld   (__locate_1+3),a        ",
  "  ld   de,__locate_1           ",
  "  ld   c,__bdos_c_writestr     ",
  "  jp   __bdos                  ",
  "__locate_1: defb 27,\"Y\",0,0,0"
}

function byte posx()
{
  "  ld   hl,__xbios_te_ask           ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             ",
  "  ld   a,l                         ",
  "  inc  a                           ",
  "  ret                              "
} using startup;

function byte posy()
{
  "  ld   hl,__xbios_te_ask           ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             ",
  "  ld   a,h                         ",
  "  inc  a                           ",
  "  ret                              "
} using startup;

function inline byte printc(byte) // character
{
  "  ld   e,a ; E = character",
  "  ld   c,__bdos_c_write   ",
  "  call __bdos             "
}

function register byte prints(word) // string
{
  "  ex   de,hl ; DE = string",
  "  ld   c,__bdos_c_writestr",
  "  jp   __bdos             "
}

function register byte printb(byte) // value
{
  "  ld   hl,__printb_1",
  "  call __btoa_0     ",
  "  jp   _prints      ",
  "__printb_1: defs 4  "
} using btoa, prints;

function register byte printw(word) // value
{
  "  ld   de,__printw_1",
  "  call __wtoa_0     ",
  "  jp   _prints      ",
  "__printw_1: defs 6  "
} using wtoa, prints;

function byte newline()
{
  "  ld   de,__newline_1     ",
  "  ld   c,__bdos_c_writestr",
  "  jp   __bdos             ",
  "__newline_1: defb 13,10,0 "
}

// endregion

// region Printer functions

function inline byte lprintc(byte) // character
{
  "  ld   e,a ; E = character",
  "  ld   c,__bdos_l_write   ",
  "  call __bdos             "
}

function register byte lprints(word) // value
{
  "  ld   a,(hl)          ",
  "  or   a               ",
  "  ret  z               ",
  "  push hl              ",
  "  ld   e,a             ",
  "  ld   c,__bdos_l_write",
  "  call __bdos          ",
  "  pop  hl              ",
  "  inc  hl              ",
  "  jr   _lprints        "
}

function register byte lprintb(byte) // value
{
  "  ld   hl,__lprintb_1",
  "  call __btoa_0      ",
  "  jp   _lprints      ",
  "__lprintb_1: defs 4  "
} using btoa, lprints;

function register byte lprintw(word) // value
{
  "  ld   de,__lprintw_1",
  "  call __wtoa_0      ",
  "  jp   _lprints      ",
  "__lprintw_1: defs 6  "
} using wtoa, lprints;

function byte lnewline()
{
  "  ld   hl,__lnewline_1    ",
  "  jp   _lprints           ",
  "__lnewline_1: defb 13,10,0"
} using lprints;

function inline byte lnewpage()
{
  "  ld   e,12            ",
  "  ld   c,__bdos_l_write",
  "  call __bdos          "
}

// endregion

// region Disc functions

function inline byte getuser()
{
  "  ld   e,#FF             ",
  "  ld   c,__bdos_f_usernum",
  "  call __bdos            "
}

function inline byte setuser(byte) // user number
{
  "  ld   e,a ; E = user number",
  "  ld   c,__bdos_f_usernum   ",
  "  call __bdos               "
}

function inline byte resetdiscs()
{
  "  ld   c,__bdos_drv_allreset",
  "  call __bdos               "
}

function inline byte getdisc()
{
  "  ld   c,__bdos_drv_get",
  "  call __bdos          "
}

function inline byte setdisc(byte) // drive number
{
  "  ld   e,a ; E = drive number",
  "  ld   c,__bdos_drv_set      ",
  "  call __bdos                "
}

function byte new(word, word) // filename, handle
{
  "  ld   hl,2                                                      ",
  "  add  hl,sp                                                     ",
  "  ld   c,(hl)                                                    ",
  "  inc  hl                                                        ",
  "  ld   b,(hl)         ; BC = handle                              ",
  "  inc  hl                                                        ",
  "  ld   e,(hl)                                                    ",
  "  inc  hl                                                        ",
  "  ld   d,(hl)         ; DE = filename                            ",
  "  ld   (__new_3),de                                              ",
  "  ld   (__new_3+2),bc                                            ",
  "  ld   de,__new_3                                                ",
  "  ld   c,__bdos_f_parse                                          ",
  "  call __bdos                                                    ",
  "  ld   a,h                                                       ",
  "  or   l                                                         ",
  "  jr   z,__new_1      ; Jump is parse is correct                 ",
  "  ld   a,#FF                                                     ",
  "  ret                 ; Return value -1 if error parsing filename",
  "__new_1:                                                         ",
  "  ld   de,(__new_3+2) ; DE = handle                              ",
  "  ld   c,__bdos_f_make                                           ",
  "  jp   __bdos                                                    ",
  "__new_3: defw #0000, #0000                                       "
}

function byte open(word, word) // filename, handle
{
  "  ld   hl,2                                                       ",
  "  add  hl,sp                                                      ",
  "  ld   c,(hl)                                                     ",
  "  inc  hl                                                         ",
  "  ld   b,(hl)          ; BC = handle                              ",
  "  inc  hl                                                         ",
  "  ld   e,(hl)                                                     ",
  "  inc  hl                                                         ",
  "  ld   d,(hl)          ; DE = filename                            ",
  "  ld   (__open_3),de                                              ",
  "  ld   (__open_3+2),bc                                            ",
  "  ld   de,__open_3                                                ",
  "  ld   c,__bdos_f_parse                                           ",
  "  call __bdos                                                     ",
  "  ld   a,h                                                        ",
  "  or   l                                                          ",
  "  jr   z,__open_1      ; Jump is parse is correct                 ",
  "  ld   a,#FF                                                      ",
  "  ret                  ; Return value -1 if error parsing filename",
  "__open_1:                                                         ",
  "  ld   de,(__open_3+2) ; DE = handle                              ",
  "  ld   hl,#000C                                                   ",
  "  add  hl,de           ; HL = EX address in FCB                   ",
  "  ld   b,8                                                        ",
  "__open_2:                                                         ",
  "  ld   (hl),a          ; Store 0 to EX, S1, S2 and RC in FCB      ",
  "  inc  hl                                                         ",
  "  djnz __open_2                                                   ",
  "  ld   c,__bdos_f_open                                            ",
  "  jp   __bdos                                                     ",
  "__open_3: defw #0000, #0000                                       "
}

function inline byte close(word) // handle
{
  "  ex   de,hl ; DE = handle",
  "  ld   c,__bdos_f_close   ",
  "  call __bdos             "
}

function byte readnext(word, word) // handle, data
{
  "  ld   hl,2                ",
  "  add  hl,sp               ",
  "  ld   e,(hl)              ",
  "  inc  hl                  ",
  "  ld   d,(hl) ; DE = data  ",
  "  push hl                  ",
  "  ld   c,__bdos_f_dmaoff   ",
  "  call __bdos              ",
  "  pop  hl                  ",
  "  inc  hl                  ",
  "  ld   e,(hl)              ",
  "  inc  hl                  ",
  "  ld   d,(hl) ; DE = handle",
  "  ld   c,__bdos_f_read     ",
  "  jp   __bdos              "
}

function byte writenext(word, word) // handle, data
{
  "  ld   hl,2                ",
  "  add  hl,sp               ",
  "  ld   e,(hl)              ",
  "  inc  hl                  ",
  "  ld   d,(hl) ; DE = data  ",
  "  push hl                  ",
  "  ld   c,__bdos_f_dmaoff   ",
  "  call __bdos              ",
  "  pop  hl                  ",
  "  inc  hl                  ",
  "  ld   e,(hl)              ",
  "  inc  hl                  ",
  "  ld   d,(hl) ; DE = handle",
  "  ld   c,__bdos_f_write    ",
  "  jp   __bdos              "
}

function byte read(word, word, word) // handle, record number, data
{
  "  ld   hl,2                           ",
  "  add  hl,sp                          ",
  "  ld   e,(hl)                         ",
  "  inc  hl                             ",
  "  ld   d,(hl) ; DE = data             ",
  "  push hl                             ",
  "  ld   c,__bdos_f_dmaoff              ",
  "  call __bdos                         ",
  "  pop  hl                             ",
  "  inc  hl                             ",
  "  ld   c,(hl)                         ",
  "  inc  hl                             ",
  "  ld   b,(hl) ; BC = record number    ",
  "  inc  hl                             ",
  "  ld   e,(hl)                         ",
  "  inc  hl                             ",
  "  ld   d,(hl) ; DE = handle           ",
  "  ld   hl,#0021                       ",
  "  add  hl,de  ; HL = Rn address in FCB",
  "  ld   (hl),c                         ",
  "  inc  hl                             ",
  "  ld   (hl),b                         ",
  "  inc  hl                             ",
  "  ld   (hl),0                         ",
  "  ld   c,__bdos_f_readrand            ",
  "  jp   __bdos                         "
}

function byte write(word, word, word) // handle, record number, data
{
  "  ld   hl,2                           ",
  "  add  hl,sp                          ",
  "  ld   e,(hl)                         ",
  "  inc  hl                             ",
  "  ld   d,(hl) ; DE = data             ",
  "  push hl                             ",
  "  ld   c,__bdos_f_dmaoff              ",
  "  call __bdos                         ",
  "  pop  hl                             ",
  "  inc  hl                             ",
  "  ld   c,(hl)                         ",
  "  inc  hl                             ",
  "  ld   b,(hl) ; BC = record number    ",
  "  inc  hl                             ",
  "  ld   e,(hl)                         ",
  "  inc  hl                             ",
  "  ld   d,(hl) ; DE = handle           ",
  "  ld   hl,#0021                       ",
  "  add  hl,de  ; HL = Rn address in FCB",
  "  ld   (hl),c                         ",
  "  inc  hl                             ",
  "  ld   (hl),b                         ",
  "  inc  hl                             ",
  "  ld   (hl),0                         ",
  "  ld   c,__bdos_f_writerand           ",
  "  jp   __bdos                         "
}

function register byte delete(word) // filename
{
  "  ld   (__delete_2),hl                                          ",
  "  ld   de,__delete_2                                            ",
  "  ld   c,__bdos_f_parse                                         ",
  "  call __bdos                                                   ",
  "  ld   a,h                                                      ",
  "  or   l                                                        ",
  "  jr   z,__delete_1  ; Jump is parse is correct                 ",
  "  ld   a,#FF                                                    ",
  "  ret                ; Return value -1 if error parsing filename",
  "__delete_1:                                                     ",
  "  ld   de,__delete_3 ; DE = handle                              ",
  "  ld   c,__bdos_f_delete                                        ",
  "  jp   __bdos                                                   ",
  "__delete_2: defw #0000, __delete_3                              ",
  "__delete_3: defs 36                                             "
}

function byte rename(word, word) // filename, new name
{
  "  ld   hl,2                                                     ",
  "  add  hl,sp                                                    ",
  "  ld   e,(hl)                                                   ",
  "  inc  hl                                                       ",
  "  ld   d,(hl) ; DE = new name                                   ",
  "  push hl                                                       ",
  "  ld   (__rename_2),de                                          ",
  "  ld   de,__rename_2                                            ",
  "  ld   c,__bdos_f_parse                                         ",
  "  call __bdos                                                   ",
  "  ld   a,h                                                      ",
  "  or   l                                                        ",
  "  pop  hl                                                       ",
  "  jr   nz,__rename_1                                            ",
  "  inc  hl                                                       ",
  "  ld   e,(hl)                                                   ",
  "  inc  hl                                                       ",
  "  ld   d,(hl) ; DE = filename                                   ",
  "  ld   (__rename_4),de                                          ",
  "  ld   de,__rename_4                                            ",
  "  ld   c,__bdos_f_parse                                         ",
  "  call __bdos                                                   ",
  "  ld   a,h                                                      ",
  "  or   l                                                        ",
  "  jr   nz,__rename_1                                            ",
  "  ld   hl,__rename_3                                            ",
  "  ld   de,__rename_5+#10                                        ",
  "  ld   bc,12                                                    ",
  "  ldir        ; Copy new filename to AL of original filename FCB",
  "  ld   de,__rename_5                                            ",
  "  ld   c,__bdos_f_rename                                        ",
  "  jp   __bdos                                                   ",
  "__rename_1:                                                     ",
  "  ld   a,#FF                                                    ",
  "  ret         ; Return value -1 if error parsing filename       ",
  "__rename_2: defw #0000, __rename_3                              ",
  "__rename_3: defs 36                                             ",
  "__rename_4: defw #0000, __rename_5                              ",
  "__rename_5: defs 36                                             "
}

// endregion

// region System functions

function inline byte computertype()
{
  "  ld   hl,__xbios_cd_version       ",
  "  ld   (__startup_xbios_address),hl",
  "  call __startup_xbios             "
} using startup;

function inline byte cpmversion()
{
  "  ld   c,__bdos_s_bdosver",
  "  call __bdos            "
}

function inline byte beep()
{
  "  ld   e,7             ",
  "  ld   c,__bdos_c_write",
  "  call __bdos          "
}

// endregion

startup(); // Program initialization