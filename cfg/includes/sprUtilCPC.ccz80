// sprUtilCPC 3.01 for ccz80 2.0.7
// By Emilio Guerrero
// April 2009 (revision August 2009)

function register byte sprInit(byte) // screen mode
{
  "__sprNumber:    equ 25                 ; Number of sprites (0 to 24)",
  "__sprSize:      equ 11                 ; Data size of each sprite",
  "__sprOfsStatus: equ 0",
  "__sprOfsImgL:   equ 1",
  "__sprOfsImgH:   equ 2",
  "__sprOfsXL:     equ 3",
  "__sprOfsXH:     equ 4",
  "__sprOfsXEndL:  equ 5",
  "__sprOfsXEndH:  equ 6",
  "__sprOfsY:      equ 7",
  "__sprOfsYEnd:   equ 8",
  "__sprOfsXShift: equ 9",
  "__sprOfsYShift: equ 10",
  "push af                                 ; Save screen mode",
  "add  a,a",
  "add  a,a",
  "ld   h,0",
  "ld   l,a                                ; DE = offset to initialization data address",
  "ld   de,__sprInitData",
  "add  hl,de                              ; HL = initialization data address",
  "ld   a,(hl)                             ; A = mask to calculate offset in screen address byte",
  "ld   (__sprPaintImageLoadOffset),a      ; Load mask to calculate offset in screen address byte",
  "inc  hl",
  "ld   a,(hl)                             ; A = jump value to calculate number of bytes of x-coordinate",
  "ld   (__sprPaintImageLoadByteX),a       ; Load jump value to calculate number of bytes of x-coordinate",
  "inc  hl",
  "ld   e,(hl)",
  "inc  hl",
  "ld   d,(hl)                             ; DE = screen width",
  "ld   (__sprTestCollisionsLoadWidth),de  ; Load screen width",
  "",
  "pop  af                                 ; Restore mode",
  "jp   #BC0E                              ; Set screen mode",
  "",
  "__sprInitData: defb %00000001,8,#A0,#00 ; Initialization data for mode 0",
  "               defb %00000011,4,#40,#01 ; Initialization data for mode 1",
  "               defb %00000111,0,#80,#02 ; Initialization data for mode 2",
  "__sprData: defs __sprNumber*__sprSize   ; Sprites data",
  "__sprCollisions: defs __sprNumber       ; Collisions/out screen table",
  "",
  "; Routine to calculate the data address of a sprite",
  "; Entry: A = sprite number",
  "; Exit: IX = DE = sprite data address",
  "; Corrupt: HL",
  "__sprDataAddress:",
  "ld   h,0",
  "ld   l,a                                ; HL = sprite number",
  "ld   d,h",
  "ld   e,l                                ; DE = sprite number",
  "add  hl,hl",
  "add  hl,hl",
  "add  hl,de",
  "add  hl,hl",
  "add  hl,de                              ; HL = sprite number * 11 (data size)",
  "",
  "ld   de,__sprData",
  "add  hl,de                              ; HL = sprite data address",
  "ex   de,hl                              ; DE = sprite data address",
  "ld   ixh,d",
  "ld   ixl,e                              ; IX = sprite data address",
  "ret",
  "",
  "; Routine to paint an image in screen (xor mode)",
  "; Entry: HL = image address, DE = x-coordinate, A = y-coordinate",
  "; Exit: none",
  "; Corrupt: A, BC, DE, HL",
  "; Image format: <width in pixels>, <height in pixels/lines>, <width in bytes>, <image size (= <image width in bytes> x <image height>)>,",
  ";               <data for image shift-0>, <data for image shift-1>, ... (2 images for mode 0, 4 images for mode 1, 8 images for mode 2)",
  "__sprPaintImage:",
  "push hl                                 ; Save image address",
  "ld   h,0",
  "ld   l,a                                ; HL = y-coordinate",
  "add  hl,hl",
  "ld   bc,__sprPaintImageTable",
  "add  hl,bc",
  "ld   a,(hl)",
  "inc  hl",
  "ld   h,(hl)",
  "ld   l,a                                ; HL = line start address for y-coordinate",
  "",
  "ld   a,e",
  "__sprPaintImageLoadOffset: equ $+1",
  "and  0                                  ; A = offset in screen address byte for x-coordinate",
  "",
  "__sprPaintImageLoadByteX: equ $+1",
  "jr   $                                  ; Jump to divide x-coordinate depending on screen mode",
  "srl  d",
  "rr   e",
  "srl  d",
  "rr   e",
  "srl  d",
  "rr   e                                  ; DE = byte number in line for x-coordinate",
  "add  hl,de                              ; HL = screen address for xy-position",
  "",
  "ex   (sp),hl                            ; Save screen address/restore image address",
  "inc  hl",
  "ld   c,(hl)                             ; C = image height in lines",
  "inc  hl",
  "ld   b,(hl)                             ; B = image width in bytes",
  "",
  "inc  hl",
  "ld   d,0",
  "ld   e,(hl)                             ; DE = image data size",
  "inc  hl                                 ; HL = shift-0 image data address",
  "or   a",
  "jr   z,__sprPaintImageNoShift           ; Jump if image shift depending on x-coordinate is 0",
  "__sprPaintImageLoopShift:",
  "add  hl,de                              ; HL = next shift image data address",
  "dec  a",
  "jr   nz,__sprPaintImageLoopShift        ; Next shift image data address",
  "__sprPaintImageNoShift:",
  "",
  "pop  de                                 ; Restore screen address",
  "ex   de,hl                              ; DE = image data, HL = screen address",
  "",
  "xor  a",
  "sub  b",
  "ld   (__sprPaintImageLoadNext),a        ; Load number of bytes to sprite next line",
  "",
  "__sprPaintImageLoopHeight:",
  "push bc                                 ; Save lines/bytes per line counters",
  "__sprPaintImageLoopWidth:",
  "ld   a,(de)                             ; A = image byte",
  "xor  (hl)                               ; A = image byte XOR screen byte",
  "ld   (hl),a                             ; Store new screen byte",
  "inc  de                                 ; DE = next image byte address",
  "inc  hl                                 ; HL = next screen byte address",
  "djnz __sprPaintImageLoopWidth           ; Next byte in line",
  "__sprPaintImageLoadNext: equ $+1",
  "ld   bc,#700",
  "add  hl,bc                              ; HL = first byte next line in screen",
  "jr   nc,__sprPaintImageNextLine         ; Jump if is not first line next character",
  "ld   bc,#C050",
  "add  hl,bc                              ; HL = first byte next line in screen (for next character)",
  "__sprPaintImageNextLine:",
  "pop  bc                                 ; Restore lines/bytes per line counters",
  "dec  c                                  ; Decrement lines counter",
  "jr   nz,__sprPaintImageLoopHeight       ; Next sprite line",
  "ret",
  "",
  "__sprPaintImageTable:",
  "defw #C000, #C800, #D000, #D800, #E000, #E800, #F000, #F800",
  "defw #C050, #C850, #D050, #D850, #E050, #E850, #F050, #F850",
  "defw #C0A0, #C8A0, #D0A0, #D8A0, #E0A0, #E8A0, #F0A0, #F8A0",
  "defw #C0F0, #C8F0, #D0F0, #D8F0, #E0F0, #E8F0, #F0F0, #F8F0",
  "defw #C140, #C940, #D140, #D940, #E140, #E940, #F140, #F940",
  "defw #C190, #C990, #D190, #D990, #E190, #E990, #F190, #F990",
  "defw #C1E0, #C9E0, #D1E0, #D9E0, #E1E0, #E9E0, #F1E0, #F9E0",
  "defw #C230, #CA30, #D230, #DA30, #E230, #EA30, #F230, #FA30",
  "defw #C280, #CA80, #D280, #DA80, #E280, #EA80, #F280, #FA80",
  "defw #C2D0, #CAD0, #D2D0, #DAD0, #E2D0, #EAD0, #F2D0, #FAD0",
  "defw #C320, #CB20, #D320, #DB20, #E320, #EB20, #F320, #FB20",
  "defw #C370, #CB70, #D370, #DB70, #E370, #EB70, #F370, #FB70",
  "defw #C3C0, #CBC0, #D3C0, #DBC0, #E3C0, #EBC0, #F3C0, #FBC0",
  "defw #C410, #CC10, #D410, #DC10, #E410, #EC10, #F410, #FC10",
  "defw #C460, #CC60, #D460, #DC60, #E460, #EC60, #F460, #FC60",
  "defw #C4B0, #CCB0, #D4B0, #DCB0, #E4B0, #ECB0, #F4B0, #FCB0",
  "defw #C500, #CD00, #D500, #DD00, #E500, #ED00, #F500, #FD00",
  "defw #C550, #CD50, #D550, #DD50, #E550, #ED50, #F550, #FD50",
  "defw #C5A0, #CDA0, #D5A0, #DDA0, #E5A0, #EDA0, #F5A0, #FDA0",
  "defw #C5F0, #CDF0, #D5F0, #DDF0, #E5F0, #EDF0, #F5F0, #FDF0",
  "defw #C640, #CE40, #D640, #DE40, #E640, #EE40, #F640, #FE40",
  "defw #C690, #CE90, #D690, #DE90, #E690, #EE90, #F690, #FE90",
  "defw #C6E0, #CEE0, #D6E0, #DEE0, #E6E0, #EEE0, #F6E0, #FEE0",
  "defw #C730, #CF30, #D730, #DF30, #E730, #EF30, #F730, #FF30",
  "defw #C780, #CF80, #D780, #DF80, #E780, #EF80, #F780, #FF80",
  "",
  "; Routine to test collisions and coordinates out screen of a sprite",
  "; Entry: A = sprite number, HL = x-coordinate, DE = x-end-coordinate, B = y-coordinate, C = y-end-coordinate",
  "; Exit: A = number of collisions or coordinates out screen, ZF = 0 if collisions or out screen,",
  ";       (__sprTestCollisionsLoadX) = x-coordinate, (__sprTestCollisionsLoadY) = x-end-coordinate,",
  ";       (__sprTestCollisionsLoadY) = y-coordinate, (__sprTestCollisionsLoadYEnd) = y-end-coordinate,",
  ";       (__sprTestCollisionsLoadSpr) = sprite number",
  "; Corrupt: BC, DE, HL, IY",
  "__sprTestCollisions:",
  "ld   (__sprTestCollisionsLoadSpr),a     ; Load sprite number",
  "ld   (__sprTestCollisionsLoadX),hl      ; Load x-coordinate",
  "ld   (__sprTestCollisionsLoadXEnd),de   ; Load x-end-coordinate",
  "ld   a,b                                ; A = y-coordinate",
  "ld   (__sprTestCollisionsLoadY),a       ; Load y-coordinate",
  "ld   a,c                                ; A = y-end-coordinate",
  "ld   (__sprTestCollisionsLoadYEnd),a    ; Load y-end-coordinate",
  "push bc                                 ; Save x-coordinate and x-end-coordinate",
  "ld   de,__sprCollisions",
  "",
  "__sprTestCollisionsLoadWidth: equ $+1",
  "ld   bc,0",
  "or   a                                  ; CF = 0",
  "sbc  hl,bc",
  "jr   nc,__sprTestCollisionsOutX         ; Jump if x-coordinate is out screen",
  "",
  "ld   hl,(__sprTestCollisionsLoadXEnd)   ; HL = x-end-coordinate",
  "or   a                                  ; CF = 0",
  "sbc  hl,bc",
  "jr   c,__sprTestCollisionsNoOutXEnd     ; Jump if x-end-coordinate not out screen",
  "__sprTestCollisionsOutX:",
  "ld   a,-1",
  "ld   (de),a                             ; Store value for x-coordinate or x-end-coordinate out screen",
  "inc  de                                 ; DE = free position in collisions table",
  "__sprTestCollisionsNoOutXEnd:",
  "",
  "pop  bc                                 ; Restore y-coordinate and y-end-coordinate",
  "ld   a,b                                ; A = y-coordinate",
  "cp   200",
  "jr   nc,__sprTestCollisionsOutY         ; Jump if y-coordinate out screen",
  "",
  "ld   a,c                                ; A = y-end-coordinate",
  "cp   200",
  "jr   c,__sprTestCollisionsNoOutYEnd     ; Jump if y-end-coordinate not out screen",
  "__sprTestCollisionsOutY:",
  "ld   a,-2",
  "ld   (de),a                             ; Store value for y-coordinate or y-end-coordiante out screen",
  "inc  de                                 ; DE = free position in collisions table",
  "__sprTestCollisionsNoOutYEnd:",
  "ld   a,e",
  "cp   __sprCollisions & #00FF",
  "jr   nz, __sprTestCollisionsExit        ; Jump to exit function if any coordinate is out screen",
  "",
  "ld   iy,__sprData",
  "ld   bc,__sprNumber*256                 ; B = number of sprites, C = sprite counter",
  "__sprTestCollisionsLoop:",
  "push bc                                 ; Save sprite counter",
  "ld   a,(iy+__sprOfsStatus)              ; A = another sprite status",
  "or   a",
  "jr   z,__sprTestCollisionsNext          ; Jump if another sprite is off",
  "ld   a,c                                ; A = another sprite number",
  "__sprTestCollisionsLoadSpr: equ $+1",
  "cp   0                                  ; Test with sprite number",
  "jr   z,__sprTestCollisionsNext          ; Jump if sprite is himself",
  "",
  "or   a                                  ; CF = 0",
  "__sprTestCollisionsLoadXEnd: equ $+1",
  "ld   hl,0                               ; HL = x-end-coordinate",
  "ld   b,(iy+__sprOfsXH)",
  "ld   c,(iy+__sprOfsXL)                  ; BC = another sprite x-coordinate",
  "sbc  hl,bc",
  "jr   c,__sprTestCollisionsNext          ; Jump if not collision",
  "",
  "__sprTestCollisionsLoadYEnd: equ $+1",
  "ld   a,0                                ; A = y-end-coordinate",
  "cp   (iy+__sprOfsY)                     ; Test with another sprite y-coordinate",
  "jr   c,__sprTestCollisionsNext          ; Jump if not collision",
  "",
  "ld   h,(iy+__sprOfsXEndH)",
  "ld   l,(iy+__sprOfsXEndL)               ; HL = another sprite x-end-coordinate",
  "__sprTestCollisionsLoadX: equ $+1",
  "ld   bc,0                               ; BC = x-coordinate",
  "sbc  hl,bc",
  "jr   c,__sprTestCollisionsNext          ; Jump if not collision",
  "",
  "ld   a,(iy+__sprOfsYEnd)                ; A = another sprite y-end-coordinate",
  "__sprTestCollisionsLoadY: equ $+1",
  "cp   0                                  ; Test with y-coordinate",
  "jr   c,__sprTestCollisionsNext          ; Jump if not collision",
  "",
  "pop  bc                                 ; Restore another sprite number",
  "ld   a,c",
  "push bc                                 ; Save another sprite number",
  "ld   (de),a                             ; Store in collisions table another sprite number",
  "inc  de                                 ; DE = free position in collision table",
  "__sprTestCollisionsNext:",
  "ld   bc,__sprSize",
  "add  iy,bc                              ; IY = next sprite data address",
  "pop  bc                                 ; Restore sprite counter",
  "inc  c                                  ; C = next sprite number",
  "djnz __sprTestCollisionsLoop            ; Test next sprite",
  "",
  "__sprTestCollisionsExit:",
  "or   a                                  ; CF = 0",
  "ld   hl,__sprCollisions",
  "ex   de,hl                              ; DE = collisions table, HL = free position in collision table",
  "sbc  hl,de                              ; HL = number of collisions or coordinates out screen",
  "ld   a,l                                ; A = number of collisions or coordinates out screen",
  "or   a                                  ; ZF = 0 if collisions or out screen",
  "ret"
}

function byte sprScenery(word, word, byte) // image, x, y
{
  "ld   ix,2",
  "add  ix,sp                              ; IX = parameters address",
  "ld   h,(ix+5)",
  "ld   l,(ix+4)                           ; HL = image address",
  "ld   d,(ix+3)",
  "ld   e,(ix+2)                           ; DE = x-coordinate",
  "ld   a,(ix+1)                           ; A = y-coordinate",
  "jp   __sprPaintImage                    ; Paint sprite image",
} using sprInit;

function inline byte sprStatus(byte) // spr
{
  "call __sprDataAddress                   ; DE = sprite data address",
  "ld   a,(de)                             ; A = sprite status",
} using sprInit;

function byte sprOn(byte, word, word, byte, byte, byte) // spr, img, x, y, xshift, yshift
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = parameters address",
  "ld   h,(iy+9)",
  "ld   l,(iy+8)                           ; HL = image address",
  "push hl                                 ; Save image address",
  "ld   d,0",
  "ld   e,(hl)",
  "dec  e                                  ; DE = x-end offset",
  "inc  hl",
  "ld   a,(hl)",
  "dec  a                                  ; A = y-end offset",
  "",
  "ld   h,(iy+7)",
  "ld   l,(iy+6)                           ; HL = x-coordinate",
  "ex   de,hl                              ; DE = x-coordinate, HL = x-end offset",
  "add  hl,de                              ; HL = x-end-coordinate",
  "ex   de,hl                              ; DE = x-end-coordinate, HL = x-coordinate",
  "push hl                                 ; Save x-coordinate",
  "push de                                 ; Save x-end-coordinate",
  "",
  "ld   b,(iy+5)                           ; B = y-coordinate",
  "add  a,b                                ; A = y-end-coordinate",
  "ld   c,a                                ; C = y-end-coordinate",
  "push bc                                 ; Save y-coordinate and y-end-coordinate",
  "",
  "ld   a,(iy+11)                          ; A = sprite number",
  "call __sprTestCollisions                ; Test for collisions or out screen",
  "jr   nz,__sprOnCollisions               ; Jump if any collision or out screen",
  "",
  "ld   iy,10",
  "add  iy,sp                              ; IY = parameters address",
  "ld   a,(iy+11)                          ; A = sprite number",
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(iy+3)                           ; A = x-shift",
  "ld   (ix+__sprOfsXShift),a              ; Store x-shift",
  "ld   a,(iy+1)                           ; A = y-shift",
  "ld   (ix+__sprOfsYShift),a              ; Store y-shift",
  "",
  "pop  bc                                 ; Restore y-coordinate and y-end-coordinate",
  "ld   (ix+__sprOfsY),b                   ; Store y-coordinate",
  "ld   (ix+__sprOfsYEnd),c                ; Store y-end-coordinate",
  "",
  "pop  de                                 ; Restore x-end-coordinate",
  "ld   (ix+__sprOfsXEndH),d",
  "ld   (ix+__sprOfsXEndL),e               ; Store x-end-coordinate",
  "pop  de                                 ; Restore x-coordinate",
  "ld   (ix+__sprOfsXH),d",
  "ld   (ix+__sprOfsXL),e                  ; Store x-coordinate",
  "",
  "pop  hl                                 ; Restore image address",
  "ld   (ix+__sprOfsImgH),h",
  "ld   (ix+__sprOfsImgL),l                ; Store image address",
  "",
  "ld   a,b                                ; A = y-coordinate",
  "call __sprPaintImage                    ; Paint sprite image",
  "",
  "ld   (ix+__sprOfsStatus),1              ; Set sprite status on",
  "xor  a                                  ; A = number of collisions or out screen",
  "ret",
  "",
  "__sprOnCollisions:",
  "ld   hl,8",
  "add  hl,sp",
  "ld   sp,hl                              ; Remove data in stack",
  "ret",
} using sprInit;

function register byte sprUpdate(byte) // spr
{
  "ld (__SprUpdateLoadSpr),a               ; Load sprite number",
  "call __sprDataAddress                   ; IX = sprite data",
  "ld   a,(ix+__sprOfsXShift)",
  "or   (ix+__sprOfsYShift)",
  "ret  z                                  ; Exit if x-shift = 0 and y-shift = 0",
  "",
  "ld   b,0",
  "ld   c,(ix+__sprOfsXShift)              ; BC = x-shift",
  "bit  7,c",
  "jr   z,__sprUpdateShiftXPos             ; Jump if x-shift is positive",
  "dec  b                                  ; BC = x-shift two complemented",
  "__sprUpdateShiftXPos:",
  "ld   h,(ix+__sprOfsXEndH)",
  "ld   l,(ix+__sprOfsXEndL)               ; HL = current x-end-coordinate",
  "add  hl,bc                              ; HL = new x-end-coordinate",
  "",
  "ld   d,(ix+__sprOfsXH)",
  "ld   e,(ix+__sprOfsXL)                  ; DE = current x-coordinate",
  "ex   de,hl                              ; DE = new x-end-coordinate, HL = current x-coordinate",
  "ld   (__sprUpdateLoadX),hl              ; Load current x-coordinate",
  "add  hl,bc                              ; HL = new x-coordinate",
  "",
  "ld   c,(ix+__sprOfsYShift)              ; C = y-shift",
  "ld   a,(ix+__sprOfsY)                   ; A = current y-coordinate",
  "ld   (__sprUpdateLoadY),a               ; Load current y-coordinate",
  "add  a,c                                ; A = new y-coordinate",
  "ld   b,a                                ; B = new y-coordinate",
  "",
  "ld   a,(ix+__sprOfsYEnd)                ; A = current y-end-coordinate",
  "add  a,c                                ; A = new y-end-coordiante",
  "ld   c,a                                ; C = new y-end-coordinate",
  "",
  "__SprUpdateLoadSpr: equ $+1",
  "ld   a,0                                ; A = sprite number",
  "push hl                                 ; Save new x-coordinate",
  "push bc                                 ; Save new y-coordinate and y-end-coordinate",
  "push de                                 ; Save new x-end-coordinate",
  "call __sprTestCollisions                ; Test if any collision or out screen",
  "jr   nz,__sprUpdateCollisions           ; Jump if any collision or out screen",
  "",
  "pop  de                                 ; Restore new x-end-coordinate",
  "ld   (ix+__sprOfsXEndH),d",
  "ld   (ix+__sprOfsXEndL),e               ; Store new x-end-coordinate",
  "pop  bc                                 ; Restore new y-coordinate and y-end-coordinate",
  "ld   (ix+__sprOfsY),b                   ; Store new y-coordinate",
  "ld   (ix+__sprOfsYEnd),c                ; Store new y-end-coordinate",
  "pop  hl                                 ; Restore new x-coordinate",
  "ld   (ix+__sprOfsXH),h",
  "ld   (ix+__sprOfsXL),l                  ; Store new x-coordinate",
  "dec  sp",
  "dec  sp                                 ; Save new x-coordinate",
  "dec  sp",
  "dec  sp                                 ; Save new y-coordinate and y-end-coordinate",
  "",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = image address",
  "__sprUpdateLoadX: equ $+1",
  "ld   de,0                               ; DE = current x-coordinate",
  "__sprUpdateLoadY: equ $+1",
  "ld   a,0                                ; A = current y-coordinate",
  "push hl                                 ; Save image address",
  "call __sprPaintImage                    ; Erase sprite image",
  "",
  "pop  hl                                 ; Restore image address",
  "pop  af                                 ; Restore new y-coordinate",
  "pop  de                                 ; Restore new x-coordinate",
  "call __sprPaintImage                    ; Paint sprite image",
  "",
  "xor  a                                  ; A = number of collisions/out screen",
  "ret",
  "",
  "__sprUpdateCollisions:",
  "ld   hl,6",
  "add  hl,sp",
  "ld   sp,hl                              ; Remove data in stack",
  "ret",
} using sprInit;

function byte sprShift(byte, byte, byte) // spr, xshift, yshift
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = parameters address",
  "ld   a,(iy+5)                           ; A = sprite number",
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(iy+3)                           ; A = new x-shift",
  "ld   (ix+__sprOfsXShift),a              ; Store new x-shift",
  "ld   a,(iy+1)                           ; A = new y-shift",
  "ld   (ix+__sprOfsYShift),a              ; Store new y-shift",
  "ret",
} using sprInit;

function byte sprXShift(byte, byte) // spr, xshift
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = parameters address",
  "ld   a,(iy+3)                           ; A = sprite number",
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(iy+1)                           ; A = new x-shift",
  "ld   (ix+__sprOfsXShift),a              ; Store new x-shift",
  "ret",
} using sprInit;

function byte sprYShift(byte, byte) // spr, yshift
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = parameters address",
  "ld   a,(iy+3)                           ; A = sprite number",
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(iy+1)                           ; A = new y-shift",
  "ld   (ix+__sprOfsYShift),a              ; Store new y-shift",
  "ret",
} using sprInit;

function byte sprMove(byte, word, byte) // spr, x, y
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = sprite number address",
  "ld   a,(iy+5)                           ; A = sprite data",
  "call __sprDataAddress                   ; IX = sprite data",
  "",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = image address",
  "push hl                                 ; Save image address",
  "ld   d,0",
  "ld   e,(hl)",
  "dec  e                                  ; DE = x-end offset",
  "inc  hl",
  "ld   a,(hl)",
  "dec  a                                  ; A = y-end offset",
  "",
  "ld   h,(iy+3)",
  "ld   l,(iy+2)                           ; HL = new x-coordinate",
  "ex   de,hl                              ; DE = new x-coordiante, HL = x-end offset",
  "add  hl,de                              ; HL = new x-end-coordinate",
  "ex   de,hl                              ; DE = new x-end-coordinate, HL = new x-coordinate",
  "push hl                                 ; Save x-coordinate",
  "push de                                 ; Save x-end-coordinate",
  "",
  "ld   b,(iy+1)                           ; B = new y-coordinate",
  "add  a,b                                ; A = new y-end-coordinate",
  "ld   c,a                                ; C = new y-end-coordinate",
  "push bc                                 ; Save y-coordinate and y-end-coordinate",
  "",
  "ld   a,(iy+5)                           ; A = sprite number",
  "call __sprTestCollisions                ; Test for collisions or out screen",
  "jr   nz,__sprMoveCollisions             ; Jump if any collision or out screen",
  "",
  "ld   d,(ix+__sprOfsXH)",
  "ld   e,(ix+__sprOfsXL)                  ; DE = current x-coordinate",
  "ld   a,(ix+__sprOfsY)                   ; A = current y-coordinate",
  "",
  "pop  bc                                 ; Restore y-coordinate and y-end-coordinate",
  "ld   (ix+__sprOfsY),b                   ; Store new y-coordinate",
  "ld   (ix+__sprOfsYEnd),c                ; Store new y-end-coordinate",
  "",
  "pop  hl                                 ; Restore new x-end-coordinate",
  "ld   (ix+__sprOfsXEndH),h",
  "ld   (ix+__sprOfsXEndL),l               ; Store new x-end-coordinate",
  "pop  hl                                 ; Restore new x-coordinate",
  "ld   (ix+__sprOfsXH),h",
  "ld   (ix+__sprOfsXL),l                  ; Store new x-coordinate",
  "",
  "ld   (__sprMoveLoadX),hl                ; Load new x-coordinate",
  "ld   c,a                                ; C = current y-coordinate",
  "ld   a,b                                ; A = new y-coordinate",
  "ld   (__sprMoveLoadY),a                 ; Load new y-coordinate",
  "ld   a,c                                ; A = current y-coordinate",
  "",
  "pop  hl                                 ; Restore image address",
  "dec  sp",
  "dec  sp                                 ; Save image address",
  "call __sprPaintImage                    ; Erase sprite image",
  "",
  "pop  hl                                 ; Restore image address",
  "__sprMoveLoadX: equ $+1",
  "ld   de,0                               ; DE = new x-coordinate",
  "__sprMoveLoadY: equ $+1",
  "ld   a,0                                ; A = new y-coordinate",
  "call __sprPaintImage                    ; Paint sprite image",
  "",
  "xor  a                                  ; A = number of collisions or out screen",
  "ret",
  "",
  "__sprMoveCollisions:",
  "ld   hl,8",
  "add  hl,sp",
  "ld   sp,hl                              ; Remove data in stack",
  "ret",
} using sprInit;

function byte sprXMove(byte, word) // spr, x
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = sprite number address",
  "ld   a,(iy+3)                           ; A = sprite data",
  "call __sprDataAddress                   ; IX = sprite data",
  "",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = image address",
  "push hl                                 ; Save image address",
  "ld   d,0",
  "ld   e,(hl)",
  "dec  e                                  ; DE = x-end offset",
  "",
  "ld   h,(iy+1)",
  "ld   l,(iy+0)                           ; HL = new x-coordinate",
  "ex   de,hl                              ; DE = new x-coordiante, HL = x-end offset",
  "add  hl,de                              ; HL = new x-end-coordinate",
  "ex   de,hl                              ; DE = new x-end-coordinate, HL = new x-coordinate",
  "push hl                                 ; Save x-coordinate",
  "push de                                 ; Save x-end-coordinate",
  "",
  "ld   b,(ix+__sprOfsY)                   ; B = y-coordinate",
  "ld   c,(ix+__sprOfsYEnd)                ; C = y-end-coordinate",
  "",
  "ld   a,(iy+3)                           ; A = sprite number",
  "call __sprTestCollisions                ; Test for collisions or out screen",
  "jr   nz,__sprXMoveCollisions            ; Jump if any collision or out screen",
  "",
  "ld   d,(ix+__sprOfsXH)",
  "ld   e,(ix+__sprOfsXL)                  ; DE = current x-coordinate",
  "ld   a,(ix+__sprOfsY)                   ; A = y-coordinate",
  "",
  "pop  hl                                 ; Restore new x-end-coordinate",
  "ld   (ix+__sprOfsXEndH),h",
  "ld   (ix+__sprOfsXEndL),l               ; Store new x-end-coordinate",
  "pop  hl                                 ; Restore new x-coordinate",
  "ld   (ix+__sprOfsXH),h",
  "ld   (ix+__sprOfsXL),l                  ; Store new x-coordinate",
  "",
  "ld   (__sprXMoveLoadX),hl               ; Load new x-coordinate",
  "ld   (__sprXMoveLoadY),a                ; Load y-coordinate",
  "",
  "pop  hl                                 ; Restore image address",
  "dec  sp",
  "dec  sp                                 ; Save image address",
  "call __sprPaintImage                    ; Erase sprite image",
  "",
  "pop  hl                                 ; Restore image address",
  "__sprXMoveLoadX: equ $+1",
  "ld   de,0                               ; DE = new x-coordinate",
  "__sprXMoveLoadY: equ $+1",
  "ld   a,0                                ; A = y-coordinate",
  "call __sprPaintImage                    ; Paint sprite image",
  "",
  "xor  a                                  ; A = number of collisions or out screen",
  "ret",
  "",
  "__sprXMoveCollisions:",
  "ld   hl,6",
  "add  hl,sp",
  "ld   sp,hl                              ; Remove data in stack",
  "ret",
} using sprInit;

function byte sprYMove(byte, byte) // spr, y
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = sprite number address",
  "ld   a,(iy+3)                           ; A = sprite data",
  "call __sprDataAddress                   ; IX = sprite data",
  "",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = image address",
  "push hl                                 ; Save image address",
  "inc  hl",
  "ld   a,(hl)",
  "dec  a                                  ; A = y-end offset",
  "",
  "ld   h,(ix+__sprOfsXH)",
  "ld   l,(ix+__sprOfsXL)                  ; HL = x-coordinate",
  "push hl                                 ; Save x-coordinate",
  "ld   d,(ix+__sprOfsXEndH)",
  "ld   e,(ix+__sprOfsXEndL)               ; DE = x-end-coordinate",
  "",
  "ld   b,(iy+1)                           ; B = new y-coordinate",
  "add  a,b                                ; A = new y-end-coordinate",
  "ld   c,a                                ; C = new y-end-coordinate",
  "push bc                                 ; Save y-coordinate and y-end-coordinate",
  "",
  "ld   a,(iy+3)                           ; A = sprite number",
  "call __sprTestCollisions                ; Test for collisions or out screen",
  "jr   nz,__sprYMoveCollisions            ; Jump if any collision or out screen",
  "",
  "ld   a,(ix+__sprOfsY)                   ; A = current y-coordinate",
  "pop  bc                                 ; Restore y-coordinate and y-end-coordinate",
  "ld   (ix+__sprOfsY),b                   ; Store new y-coordinate",
  "ld   (ix+__sprOfsYEnd),c                ; Store new y-end-coordinate",
  "ld   c,a                                ; C = current y-coordinate",
  "ld   a,b                                ; A = new y-coordinate",
  "ld   (__sprYMoveLoadY),a                ; Load new y-coordinate",
  "ld   a,c                                ; A = current y-coordinate",
  "",
  "pop  de                                 ; Restore x-coordinate",
  "ld   (__sprYMoveLoadX),de               ; Load x-coordinate",
  "",
  "pop  hl                                 ; Restore image address",
  "dec  sp",
  "dec  sp                                 ; Save image address",
  "call __sprPaintImage                    ; Erase sprite image",
  "",
  "pop  hl                                 ; Restore image address",
  "__sprYMoveLoadX: equ $+1",
  "ld   de,0                               ; DE = x-coordinate",
  "__sprYMoveLoadY: equ $+1",
  "ld   a,0                                ; A = new y-coordinate",
  "call __sprPaintImage                    ; Paint sprite image",
  "",
  "xor  a                                  ; A = number of collisions or out screen",
  "ret",
  "",
  "__sprYMoveCollisions:",
  "ld   hl,6",
  "add  hl,sp",
  "ld   sp,hl                              ; Remove data in stack",
  "ret",
} using sprInit;

function byte sprImage(byte, word) // spr, img
{
  "ld   iy,2",
  "add  iy,sp                              ; IY = parameters address",
  "ld   a,(iy+3)                           ; A = sprite number",
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = current image address",
  "ld   b,(iy+1)",
  "ld   c,(iy+0)                           ; BC = new image address",
  "ld   (ix+__sprOfsImgH),b",
  "ld   (ix+__sprOfsImgL),c                ; Store new image address",
  "ld   d,(ix+__sprOfsXH)",
  "ld   e,(ix+__sprOfsXL)                  ; DE = x-coordinate",
  "ld   a,(ix+__sprOfsY)                   ; A = y-coordinate",
  "push bc                                 ; Save new image address",
  "push de                                 ; Save x-coordinate",
  "push af                                 ; Save y-coordinate",
  "call __sprPaintImage                    ; Erase sprite image",
  "pop  af                                 ; Restore y-coordinate",
  "pop  de                                 ; Restore x-coordinate",
  "pop  hl                                 ; Restore new image address",
  "jp   __sprPaintImage                    ; Paint new sprite image",
} using sprInit;

function inline word sprCollisions()
{
  "ld   hl,__sprCollisions                 ; HL = collisions table address",
} using sprInit;

function inline word sprGetImage(byte) // spr
{
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = image address",
} using sprInit;

function inline word sprGetX(byte) // spr
{
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   h,(ix+__sprOfsXH)",
  "ld   l,(ix+__sprOfsXL)                  ; HL = x-coordinate",
} using sprInit;

function inline byte sprGetY(byte) // spr
{
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(ix+__sprOfsY)                   ; A = y-coordinate",
} using sprInit;

function inline byte sprGetXShift(byte) // spr
{
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(ix+__sprOfsXShift)              ; A = x-shift",
} using sprInit;

function inline byte sprGetYShift(byte) // spr
{
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   a,(ix+__sprOfsYShift)              ; A = y-shift",
} using sprInit;

function register byte sprOff(byte) // spr
{
  "call __sprDataAddress                   ; IX = sprite data address",
  "ld   h,(ix+__sprOfsImgH)",
  "ld   l,(ix+__sprOfsImgL)                ; HL = image address",
  "ld   d,(ix+__sprOfsXH)",
  "ld   e,(ix+__sprOfsXL)                  ; DE = x-coordinate",
  "ld   a,(ix+__sprOfsY)                   ; A = y-coordinate",
  "ld   (ix+__sprOfsStatus),0              ; Set status sprite off",
  "jp   __sprPaintImage                    ; Erase sprite image",
} using sprInit;

function inline byte sprFix()
{
  "halt"
}

function inline byte sprFlyback()
{
  "ld   b,#F5",
  "__sprFlybackLoop:",
  "in   a,(c)",
  "rra",
  "jr   nc,__sprFlybackLoop                ; Wait for next flyback"
}